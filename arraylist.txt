########################----MISCLANEOUS METHOS-----###########3

add(E e): Appends the specified element to the end of this list.
ArrayList<String> list = new ArrayList<>();
list.add("Hello");

add(int index, E element): Inserts the specified element at the specified position in this list.
list.add(1, "World");

get(int index): Returns the element at the specified position in this list.
String str = list.get(0);

set(int index, E element): Replaces the element at the specified position in this list with the specified element.
list.set(1, "Java");

remove(int index): Removes the element at the specified position in this list.
list.remove(0);

remove(Object o): Removes the first occurrence of the specified element from this list, if it is present.
list.remove("Java");

clear(): Removes all of the elements from this list.
list.clear();

size(): Returns the number of elements in this list.
int size = list.size();

Advanced Methods
contains(Object o): Returns true if this list contains the specified element.
boolean contains = list.contains("Hello");

indexOf(Object o): Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
int index = list.indexOf("Hello");

lastIndexOf(Object o): Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
int lastIndex = list.lastIndexOf("Hello");

isEmpty(): Returns true if this list contains no elements.
boolean isEmpty = list.isEmpty();

toArray(): Returns an array containing all of the elements in this list in proper sequence (from first to last element).
Object[] array = list.toArray();

toArray(T[] a): Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
String[] array = list.toArray(new String[0]);

subList(int fromIndex, int toIndex): Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
List<String> subList = list.subList(0, 2);

addAll(Collection<? extends E> c): Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
List<String> newElements = Arrays.asList("Element1", "Element2");
list.addAll(newElements);

addAll(int index, Collection<? extends E> c): Inserts all of the elements in the specified collection into this list, starting at the specified position.
list.addAll(1, newElements);

retainAll(Collection<?> c): Retains only the elements in this list that are contained in the specified collection.
List<String> elementsToRetain = Arrays.asList("Hello", "World");
list.retainAll(elementsToRetain);

removeAll(Collection<?> c): Removes from this list all of its elements that are contained in the specified collection.
List<String> elementsToRemove = Arrays.asList("Hello", "World");
list.removeAll(elementsToRemove);

iterator(): Returns an iterator over the elements in this list in proper sequence.
Iterator<String> iterator = list.iterator();

while (iterator.hasNext()) {
    System.out.println(iterator.next());
}

listIterator(): Returns a list iterator over the elements in this list (in proper sequence).
ListIterator<String> listIterator = list.listIterator();
while (listIterator.hasNext()) {
    System.out.println(listIterator.next());
}

listIterator(int index): Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.
ListIterator<String> listIteratorFromIndex = list.listIterator(1);
while (listIteratorFromIndex.hasNext()) {
    System.out.println(listIteratorFromIndex.next());
}

ArrayList(Class)  ----- List(Interface) -----------------> Collections 

 // Creating an object of Arraylist class
ArrayList<Integer> list = new ArrayList<>();

1)Adding element

Inserting at the end 
Returns boolean value true .

        // add method for integer ArrayList
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        System.out.println(list);  [1, 2, 3, 4] 
    
Insert at specific index ( 0 based indexing)

        // add method for integer ArrayList
        list.add(1);
        list.add(2);

        list.add(1, 3);
        list.add(2, 4);
        System.out.println(list);  [1, 3, 4, 2]

2)Removing element

List<Integer> al = new ArrayList<>(); 
        al.add(10); 
        al.add(20); 
        al.add(30); 
        al.add(1); 
        al.add(2); 

Removing by index

        al.remove(1); //removes element 20
        al.remove(1); //removes element 30

Removing by element

        al.remove(Integer.valueOf(1));  //removes element 1
        al.remove(Integer.valueOf(2));  //removes element 2

Note: It is not recommended to use ArrayList.remove() when iterating over elements. 

Also new Integer( int_value) has been deprecated since Java 9, 
so it is better idea to use Integer.valueOf(int_value) to convert a primitive integer to Integer Object.


Removing by Iterator

        List<Integer> al = new ArrayList<>(); 
        al.add(10); 
        al.add(20); 
        al.add(30); 
        al.add(1); 
        al.add(2); 

        
        Iterator itr = al.iterator();  // Creating iterator object 
  
        // Holds true till there is single element remaining in the object 
        while (itr.hasNext()) { 
  
            // Remove elements smaller than 10 using 
            // Iterator.remove() 
            int x = (Integer)itr.next(); 
            if (x < 10) 
                itr.remove(); 
        } 
        System.out.print(al);   [10, 20, 30]

3)Replace a element in arratlist

public Object set(int index, Object element)

Return Value: The element that is at the specified index

Exception Throws: IndexOutOfBoundsException 
This occurs when the index is out of range.

index < 0 or index >= size()

  // Try block to check for exceptions
    try {

     
      ArrayList<String> list = new ArrayList<>();
      list.add("A");
      list.add("B");
      list.add("C");
      list.add("D");

      list.set(2, "E");  // C gets replaced by E

  
      System.out.println(list); [A, B, E, D]

    }

    // Catch block to handle the exceptions
    catch (Exception e) {

     // Display the exception on the console
      System.out.println(e);
    }


3)Conversion of Array To ArrayList

Arrays.asList() method
Syntax: public static List asList(T... a)
// Returns a fixed-size List as of size of given array. 
// Element Type of List is of same as type of array element type.
// It returns an List containing all of the elements in this 
// array in the same order. 
// T represents generics 
Returns a fixed-size list backed by the specified array.
The returned list is serializable and implements RandomAccess.
Since returned List is fixed-size therefore we can’t add more element in it, 
but we can replace existing element with new element using set(index, new Element)
 method defined in ArrayList class. 

        String[] geeks = {"Rahul", "Utkarsh",
                          "Shubham", "Neelam"};
 
        // Conversion of array to ArrayList
        // using Arrays.asList
        List al = Arrays.asList(geeks);
 
        System.out.println(al);[Rahul, Utkarsh, Shubham, Neelam]

Since returned List is fixed-size List, we can’t add more element(s). 
An attempt of adding more elements would cause UnsupportedOperationException.



It is therefore recommended to create new ArrayList and pass Arrays.asList(array reference) as an argument to it (i.e. as an constructor argument of ArrayList).




	 String[] geeks = {"Rahul", "Utkarsh",
                          "Shubham", "Neelam"};
 
        List<String> al =
            new ArrayList<String>(Arrays.asList(geeks));
        System.out.println(al);
 
        // Adding some more values to the List.
        al.add("Shashank");
        al.add("Nishant");


Using Collections.addAll() 

public static  boolean addAll(Collection c, T... a)
// Adds all of the specified elements to the specified collection.
// Elements to be added may be specified individually or as an array.
// T is generics

Note that there is a collection parameter c into which elements to be inserted and array parameter a contains the elements to insert into c. 
Return type is boolean type. It returns true if the collection changed as a result of the call.
It throws UnsupportedOperationException if collection c does not support add method and throws IllegalArgumentException if some aspect of a value in elements(or elements of array) prevents it from being added to collection c.

        String[] geeks = {"Rahul", "Utkarsh",
                         "Shubham", "Neelam"};
 
        List<String> al = new ArrayList<String>();
 
        // adding elements of array to arrayList.
        Collections.addAll(al, geeks);
 
        System.out.println(al);

Manual method

String[] geeks = {"Rahul", "Utkarsh",
                          "Shubham", "Neelam"};
 
        List<String> al = new ArrayList<String>();
 
        // Array to ArrayList Conversion
        for (String geek : geeks)
            al.add(geek);
 
        System.out.println(al);


Comparing two arraylist

boolean equals(Object o)
Parameters: This function has a single parameter which is an object to be compared for equality.

Returns: This method returns True if Array lists are equal.

 ArrayList<String> ArrayList1
            = new ArrayList<String>();
        ArrayList<String> ArrayList2
            = new ArrayList<String>();
 
        // insert items in ArrayList 1
        ArrayList1.add("item 1");
        ArrayList1.add("item 2");
        ArrayList1.add("item 3");
        ArrayList1.add("item 4");
 
        // insert items in ArrayList 2
        ArrayList2.add("item 1");
        ArrayList2.add("item 2");
        ArrayList2.add("item 3");
        ArrayList2.add("item 4");
 
        // Display both ArrayList
        System.out.println(" ArrayList1 = " + ArrayList2);
        System.out.println(" ArrayList1 = " + ArrayList1);
 
        // compare ArrayList1 with ArrayList2
        if (ArrayList1.equals(ArrayList2) == true) {
            System.out.println(" Array List are equal");
        }
        else
        // else block execute when
        // ArrayList are not equal
        {
            System.out.println(" Array List are not equal");
        }


###################################-----misclaneous methods------#####################








